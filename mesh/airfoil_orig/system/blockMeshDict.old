/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
    (0.0 -0.04 -4.5) // 0
    (4.5  -0.04 0.0) // 1
    (0  -0.04  4.5)  // 2
    (-4.5 -0.04  0) // 3
    (0.0  -0.055 -4.5) // 4
    (4.5  -0.055 0.0) // 5
    (0.0  -0.055  4.5) // 6
    (-4.5  -0.055  0) // 7
    (0.0 -0.04 0.0)   // 8
    (0.0 -0.055 0.0)  // 9 
);

blocks
(
    //hex (0 1 2 3 4 5 6 7) (120 120 1) simpleGrading (1 1 1)
    hex (0 1 8 8 4 5 9 9) (30 30 1) simpleGrading (1 1 1)
    hex (1 2 8 8 5 6 9 9) (30 30 1) simpleGrading (1 1 1)
    hex (2 3 8 8 6 7 9 9) (30 30 1) simpleGrading (1 1 1)
    hex (3 0 8 8 7 4 9 9) (30 30 1) simpleGrading (1 1 1)
);

edges
(
 arc 0 1 ( 3.182 -0.04 -3.182) 
 arc 1 2 ( 3.182 -0.04 3.182) 
 arc 2 3 ( -3.182 -0.04 3.182) 
 arc 3 0 ( -3.182 -0.04 -3.182) 
 arc 4 5 ( 3.182 -0.055 -3.182) 
 arc 5 6 ( 3.182 -0.055 3.182) 
 arc 6 7 ( -3.182 -0.055 3.182) 
 arc 7 4 ( -3.182 -0.055 -3.182) 
);

boundary
(

    minX
    {
        type patch;
        faces
        (
            //(0 4 7 3)
	    (3 0 4 7)
        );
    }

    maxX
    {
        type patch;
        faces
        (
            //(2 6 5 1)
	    (1 2 5 6)
        );
    }

    minY
    {
        type patch;
        faces
        (
            //(0 4 5 1)
	    (0 1 5 4)
        );
    }

    maxY
    {
        type patch;
        faces
        (
            //(2 6 7 3)
	    (2 3 7 6)
        );
    }

    front
    {
        type empty;
        faces
        (
            //(0 1 2 3)
	    (0 8 8 1)
	    (1 8 8 2)
	    (2 8 8 3)
	    (3 8 8 0)
        );
    }
    back  
    {
        type empty;
        faces
        (
            //(4 5 6 7)
	    (5 9 9 4)
	    (6 9 9 5)
	    (7 9 9 6)
	    (4 9 9 7)

        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
